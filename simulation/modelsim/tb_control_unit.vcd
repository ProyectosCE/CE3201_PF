$date
	Fri Jun 06 23:49:49 2025
$end
$version
	ModelSim Version 10.5b
$end
$timescale
	1ps
$end

$scope module tb_Control_Unit $end
$var reg 4 ! Cond [3:0] $end
$var reg 2 " Op [1:0] $end
$var reg 6 # Funct [5:0] $end
$var reg 4 $ Rd [3:0] $end
$var reg 4 % Flags [3:0] $end
$var reg 1 & clk $end
$var reg 1 ' rst $end
$var reg 1 ( PCSrc $end
$var reg 1 ) MemtoReg $end
$var reg 1 * MemWrite $end
$var reg 2 + ALUControl [1:0] $end
$var reg 1 , ALUSrc $end
$var reg 2 - ImmSrc [1:0] $end
$var reg 1 . RegWrite $end
$var reg 2 / RegSrc [1:0] $end

$scope module dut $end
$var wire 1 0 Cond [3] $end
$var wire 1 1 Cond [2] $end
$var wire 1 2 Cond [1] $end
$var wire 1 3 Cond [0] $end
$var wire 1 4 Op [1] $end
$var wire 1 5 Op [0] $end
$var wire 1 6 Funct [5] $end
$var wire 1 7 Funct [4] $end
$var wire 1 8 Funct [3] $end
$var wire 1 9 Funct [2] $end
$var wire 1 : Funct [1] $end
$var wire 1 ; Funct [0] $end
$var wire 1 < Rd [3] $end
$var wire 1 = Rd [2] $end
$var wire 1 > Rd [1] $end
$var wire 1 ? Rd [0] $end
$var wire 1 @ Flags [3] $end
$var wire 1 A Flags [2] $end
$var wire 1 B Flags [1] $end
$var wire 1 C Flags [0] $end
$var wire 1 D clk $end
$var wire 1 E rst $end
$var reg 1 F PCSrc $end
$var reg 1 G MemtoReg $end
$var reg 1 H MemWrite $end
$var reg 2 I ALUControl [1:0] $end
$var reg 1 J ALUSrc $end
$var reg 2 K ImmSrc [1:0] $end
$var reg 1 L RegWrite $end
$var reg 2 M RegSrc [1:0] $end
$var reg 1 N RegW $end
$var reg 1 O MemW $end
$var reg 1 P ALUOP $end
$var reg 1 Q Branch $end
$var reg 1 R PCS $end
$var reg 1 S CondEx $end
$var reg 2 T FlagW [1:0] $end
$var reg 4 U ALUfLags [3:0] $end

$scope module inst_PCLogic $end
$var wire 1 < Rd [3] $end
$var wire 1 = Rd [2] $end
$var wire 1 > Rd [1] $end
$var wire 1 ? Rd [0] $end
$var wire 1 V RegW $end
$var wire 1 W Branch $end
$var reg 1 X PCS $end
$upscope $end

$scope module inst_Main_Deco $end
$var wire 1 4 Op [1] $end
$var wire 1 5 Op [0] $end
$var wire 1 6 Funct [5] $end
$var wire 1 7 Funct [4] $end
$var wire 1 8 Funct [3] $end
$var wire 1 9 Funct [2] $end
$var wire 1 : Funct [1] $end
$var wire 1 ; Funct [0] $end
$var reg 1 Y RegW $end
$var reg 1 Z MemW $end
$var reg 1 [ MemtoReg $end
$var reg 1 \ ALUSrc $end
$var reg 2 ] ImmSrc [1:0] $end
$var reg 2 ^ RegSrc [1:0] $end
$var reg 1 _ ALUOP $end
$var reg 1 ` Branch $end
$upscope $end

$scope module inst_ALU_Deco $end
$var wire 1 a ALUOP $end
$var wire 1 7 Funct [4] $end
$var wire 1 8 Funct [3] $end
$var wire 1 9 Funct [2] $end
$var wire 1 : Funct [1] $end
$var wire 1 ; Funct [0] $end
$var reg 2 b ALUControl [1:0] $end
$var reg 2 c FlagW [1:0] $end
$upscope $end

$scope module Register_Flag1 $end
$var parameter 32 d N $end
$var wire 1 D clk $end
$var wire 1 E rst $end
$var wire 1 @ D [1] $end
$var wire 1 A D [0] $end
$var wire 1 e en $end
$var reg 2 f Q [1:0] $end
$upscope $end

$scope module Register_Flag2 $end
$var parameter 32 g N $end
$var wire 1 D clk $end
$var wire 1 E rst $end
$var wire 1 B D [1] $end
$var wire 1 C D [0] $end
$var wire 1 h en $end
$var reg 2 i Q [1:0] $end
$upscope $end

$scope module inst_Condition_Check $end
$var wire 1 j Flag [3] $end
$var wire 1 k Flag [2] $end
$var wire 1 l Flag [1] $end
$var wire 1 m Flag [0] $end
$var wire 1 0 Cond [3] $end
$var wire 1 1 Cond [2] $end
$var wire 1 2 Cond [1] $end
$var wire 1 3 Cond [0] $end
$var reg 1 n CondEx $end
$var reg 1 o V $end
$var reg 1 p C $end
$var reg 1 q N $end
$var reg 1 r Z $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b1110 !
b1 "
b100 #
b0 $
b0 %
0&
1'
0(
0)
1*
b0 +
1,
b1 -
0.
b10 /
0F
0G
1H
b0 I
1J
b1 K
0L
b10 M
0N
1O
0P
0Q
0R
1S
b0 T
b0 U
0X
0Y
1Z
0[
1\
b1 ]
b10 ^
0_
0`
b0 b
b0 c
b0 f
b0 i
1n
0o
0p
0q
0r
b10 d
b10 g
03
12
11
10
15
04
0;
0:
19
08
07
06
0?
0>
0=
0<
0C
0B
0A
0@
0D
1E
0h
0e
0V
0W
0a
0m
0l
0k
0j
$end
#5000
1&
1D
#10000
0'
